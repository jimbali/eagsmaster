<div class="row">
  <div class="col-12 mt-2">
    <h2>Edit quiz</h2>
    <%= form_for @quiz, url: quiz_url, id: @quiz.id do |f| %>
      <div class="form-group">
        <%= f.label :name, 'Name' %>
        <%= f.text_field :name, class: 'form-control' %>
      </div>
      <div class="form-group">
        <%=
          f.label :code,
                  'ID code (a short code that people can use to find your quiz)'
        %>
        <%= f.text_field :code, class: 'form-control' %>
      </div>
      <div class="form-group">
        <%= f.label :cursor, 'Current question' %>
        <%=
          f.collection_select :cursor,
                              @quiz.questions,
                              :id,
                              :title,
                              { include_blank: true },
                              { class: 'custom-select' }
        %>
      </div>
      <%= f.submit class: 'btn btn-primary' %>
    <% end %>
  </div>
</div>
<div class="row mt-4">
  <div class="col-12">
    <h3>Questions</h3>
    <p id="example-console">Changes will be autosaved</p>
    <div id="example"></div>
    <script>
      var data = <%=
        raw(
          @quiz.questions.map do |question|
            {
              id: question.id,
              title: question.title,
              expired: question.expired
            }
          end.to_json
        )
      %>;

      var autosaveNotification;
      var exampleConsole = document.getElementById('example-console');
      var container = document.getElementById('example');
      var token = document.querySelector('meta[name="csrf-token"]').content;
      var hot = new Handsontable(container, {
        data: data,
        rowHeaders: false,
        colHeaders: ['Title', 'Finished answering?'],
        columns: [
          { data: 'title' },
          { data: 'expired', type: 'checkbox' }
        ],
        filters: true,
        dropdownMenu: true,
        licenseKey: 'non-commercial-and-evaluation',
        contextMenu: ['remove_row'],
        afterChange: function (change, source) {
          if (source === 'loadData') {
            return;
          }
          clearTimeout(autosaveNotification);
          row = data[change[0][0]];
          key = change[0][1];
          questionId = row['id'];
          console.log(questionId);
          fetch(
            '<%= quiz_question_index_url(quiz_id: @quiz.id) %>' + '/' + questionId,
            {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': token
              },
              body: JSON.stringify(
                { question: { title: row.title, expired: row.expired } }
              )
            }
          )
          .then((response) => {
            return response.json();
          })
          .then((data) => {
            exampleConsole.innerText  = 'Autosaved (' + change.length + ' ' + 'cell' + (change.length > 1 ? 's' : '') + ')';
            autosaveNotification = setTimeout(function() {
              exampleConsole.innerText ='Changes will be autosaved';
            }, 2000);
          });
        },
        beforeRemoveRow: function(index, amount, physicalRows, source) {
          for(var i = 0; i < physicalRows.length; i++) {
            index = physicalRows[i];
            id = data[index][0];
            fetch(
              '<%= quiz_question_index_url(quiz_id: @quiz.id) %>' + '/' + id,
              {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': token
                }
              }
            )
            .then((response) => {
              exampleConsole.innerText  = 'Autosaved (row deleted)';
              autosaveNotification = setTimeout(function() {
                exampleConsole.innerText ='Changes will be autosaved';
              }, 2000);
            });
          }
        }
      });
    </script>
    <%= form_for(:question, url: quiz_question_index_url(quiz_id: @quiz.id)) do |f| %>
      <%= f.text_field :title %>
      <%= f.submit 'Add question' %>
    <% end %>
  </div>
</div>
<div class="row mt-4">
  <div class="col-12">
    <h3>Answers</h3>
    <p id="example-console2">Changes will be autosaved</p>
    <div id="example2"></div>
    <script>
      var data2 = <%= raw @progress_data.to_json %>;
      var autosaveNotification2;
      var exampleConsole = document.getElementById('example-console2');
      var container = document.getElementById('example2');
      var token = document.querySelector('meta[name="csrf-token"]').content;
      var hot2 = new Handsontable(container, {
        data: data2,
        rowHeaders: false,
        colHeaders: <%= raw @column_headers.to_json %>,
        columns: <%= raw @column_data.to_json %>,
        filters: true,
        dropdownMenu: true,
        licenseKey: 'non-commercial-and-evaluation',
        contextMenu: ['remove_row'],
        afterChange: function (change, source) {
          if (source === 'loadData') return;
          console.log(change);

          clearTimeout(autosaveNotification2);

          key = change[0][1];
          var keyRegex = /question(\d+)Points/g;
          var match = keyRegex.exec(key);
          if (!match) return;

          var questionId = Number(match[1]);

          var row = data2[change[0][0]];
          var userId = row['playerId'];

          var points = Number(change[0][3]);

          console.log(questionId);
          console.log(userId);
          console.log(points);

          fetch(
            '<%= update_points_url %>',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': token
              },
              body: JSON.stringify({
                questionId: questionId,
                userId: userId,
                points: points
              })
            }
          )
          .then((response) => {
            return response.json();
          })
          .then((data) => {
            exampleConsole.innerText  = 'Autosaved (' + change.length + ' ' + 'cell' + (change.length > 1 ? 's' : '') + ')';
            autosaveNotification2 = setTimeout(function() {
              exampleConsole.innerText ='Changes will be autosaved';
            }, 2000);
          });
        }
      });
    </script>
  </div>
</div>
